// Generated by CoffeeScript 1.6.2
(function() {
  var id, initView;

  id = 0;

  initView = function(root, view, options) {
    var $root, action, boneView, name, _fn;

    $root = $(root);
    boneView = {};
    boneView.id = id += 1;
    $root.attr('data-bone-id', id);
    boneView.data = function() {
      return $root.data.apply($root, arguments);
    };
    boneView.$ = function() {
      return $root.find.apply($root, arguments);
    };
    boneView.templates = bone.templates;
    boneView.el = root;
    boneView.$el = $root;
    _fn = function(name, action) {
      return boneView[name] = function() {
        var message;

        if (bone.log != null) {
          message = "View: [" + options.selector + ":" + name + "]";
          bone.log(message, boneView.el, arguments);
        }
        return action.apply(boneView, arguments);
      };
    };
    for (name in options) {
      action = options[name];
      if (name === 'events') {
        continue;
      }
      if (Object.prototype.toString.call(action) !== '[object Function]') {
        boneView[name] = action;
        continue;
      }
      _fn(name, action);
    }
    if (options.initialize != null) {
      options.initialize.apply(boneView, []);
    }
    return boneView;
  };

  bone.view = function(selector, options) {
    var action, eventSelector, events, functionName, name, view, _fn, _fn1;

    view = {};
    view.$ = function(subSelector) {
      var $element, boneId, boneView, boneViews, combinedSelector, element, _i, _len, _ref;

      if ('string' === typeof subSelector) {
        combinedSelector = "" + selector + subSelector;
        return bone.view(combinedSelector, options);
      } else {
        boneId = subSelector;
        _ref = $(selector);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          $element = $(element);
          boneViews = $(element).data('bone-views');
          if (boneViews == null) {
            boneViews = {};
            $(element).data('bone-views', boneViews);
          }
          boneView = boneViews[selector];
          if (boneView == null) {
            boneView = initView(element, view, options);
            $element.data('bone-views')[selector] = boneView;
          }
          if (boneId === boneView.id) {
            return boneView;
          }
        }
      }
    };
    options.selector = selector;
    events = options.events;
    _fn = function(eventSelector, functionName) {
      var action, eventName, eventSplitter, fullSelector, match, subSelector;

      eventSplitter = /^(\S+)\s*(.*)$/;
      match = eventSelector.match(eventSplitter);
      eventName = match[1];
      subSelector = match[2];
      fullSelector = selector;
      if (subSelector != null) {
        fullSelector += " " + subSelector;
      }
      action = options[functionName];
      return $(function() {
        return $('body').on(eventName, fullSelector, function(event) {
          var boneView, boneViews, element, message;

          element = $(event.currentTarget).parents(selector)[0];
          if (element == null) {
            element = event.currentTarget;
          }
          if (bone.log != null) {
            message = "Interface: [" + fullSelector + ":" + eventName + "]";
            bone.log(message, element);
          }
          boneViews = $(element).data('bone-views');
          if (boneViews == null) {
            boneViews = {};
            $(element).data('bone-views', boneViews);
          }
          boneView = boneViews[selector];
          if (boneView == null) {
            boneView = initView(element, view, options);
            $(element).data('bone-views')[selector] = boneView;
          }
          if ($.trim(selector) !== $.trim(fullSelector)) {
            element = $(fullSelector).parents(selector)[0];
          }
          return action.call(boneView, event);
        });
      });
    };
    for (eventSelector in events) {
      functionName = events[eventSelector];
      if (functionName === 'events') {
        continue;
      }
      _fn(eventSelector, functionName);
    }
    _fn1 = function(name, action) {
      return view[name] = function() {
        var args, element, _i, _len, _ref, _results;

        args = arguments;
        _ref = $(selector);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          _results.push((function(element) {
            var boneView, boneViews, message;

            boneViews = $(element).data('bone-views');
            if (boneViews == null) {
              boneViews = {};
              $(element).data('bone-views', boneViews);
            }
            boneView = boneViews[selector];
            if (boneView == null) {
              boneView = initView(element, view, options);
              $(element).data('bone-views')[selector] = boneView;
            }
            if (bone.log != null) {
              message = "View: [" + selector + ":" + name + "]";
              bone.log(message, element, args);
            }
            return action.apply(boneView, args);
          })(element));
        }
        return _results;
      };
    };
    for (name in options) {
      action = options[name];
      if (name === 'events') {
        continue;
      }
      if (Object.prototype.toString.call(action) !== '[object Function]') {
        view[name] = action;
        continue;
      }
      _fn1(name, action);
    }
    return view;
  };

}).call(this);
