// Generated by CoffeeScript 1.6.2
(function() {
  var extend, isExplorer, rootStripper, routeStripper, trailingSlash;

  extend = function(obj) {
    var prop, source, _i, _len, _ref;

    _ref = Array.prototype.slice.call(arguments, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      source = _ref[_i];
      if (source) {
        for (prop in source) {
          obj[prop] = source[prop];
        }
      }
    }
    return obj;
  };

  routeStripper = /^[#\/]|\s+$/g;

  rootStripper = /^\/+|\/+$/g;

  isExplorer = /msie [\w.]+/;

  trailingSlash = /\/$/;

  bone.History = (function() {
    function History() {
      if (typeof window !== "undefined") {
        this.location = window.location;
        this.history = window.history;
      }
    }

    History.prototype.interval = 50;

    History.prototype.getHash = function(window) {
      var match;

      match = (window || this).location.href.match(/#(.*)$/);
      if (match) {
        return match[1];
      } else {
        return "";
      }
    };

    History.prototype.getFragment = function(fragment, forcePushState) {
      var root;

      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = this.location.pathname;
          root = this.root.replace(trailingSlash, "");
          if (!fragment.indexOf(root)) {
            fragment = fragment.substr(root.length);
          }
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, "");
    };

    History.prototype.start = function(options) {
      var atRoot, docMode, fragment, loc, oldIE,
        _this = this;

      this.options = extend({}, {
        root: "/"
      }, this.options, options);
      this.root = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState = !!this.options.pushState;
      this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);
      fragment = this.getFragment();
      docMode = document.documentMode;
      oldIE = isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7);
      this.root = ("/" + this.root + "/").replace(rootStripper, "/");
      if (oldIE && this._wantsHashChange) {
        this.iframe = bone.$("<iframe src=\"javascript:0\" tabindex=\"-1\" />").hide().appendTo("body")[0].contentWindow;
        this.navigate(fragment);
      }
      if (this._hasPushState) {
        bone.$(window).on("popstate", function() {
          return _this.checkUrl.apply(_this, arguments);
        });
      } else if (this._wantsHashChange && ("onhashchange" in window) && !oldIE) {
        bone.$(window).on("hashchange", function() {
          return _this.checkUrl.apply(_this, arguments);
        });
      } else {
        if (this._wantsHashChange) {
          this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
        }
      }
      this.fragment = fragment;
      loc = this.location;
      atRoot = loc.pathname.replace(/[^\/]$/, "$&/") === this.root;
      if (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !atRoot) {
        this.fragment = this.getFragment(null, true);
        this.location.replace(this.root + this.location.search + "#" + this.fragment);
        return true;
      } else if (this._wantsPushState && this._hasPushState && atRoot && loc.hash) {
        this.fragment = this.getHash().replace(routeStripper, "");
        this.history.replaceState({}, document.title, this.root + this.fragment + loc.search);
      }
      if (!this.options.silent) {
        return this.loadUrl();
      }
    };

    History.prototype.route = function(route, callback) {
      return this.handlers.unshift({
        route: route,
        callback: callback
      });
    };

    History.prototype.checkUrl = function(e) {
      var current;

      current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) {
        return false;
      }
      if (this.iframe) {
        this.navigate(current);
      }
      return this.loadUrl() || this.loadUrl(this.getHash());
    };

    History.prototype.handlers = [];

    History.prototype.loadUrl = function(fragmentOverride) {
      var args, fragment, handler, _base, _i, _len, _ref, _ref1;

      fragment = this.fragment = this.getFragment(fragmentOverride);
      _ref = this.handlers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        if (handler.route.test(fragment)) {
          args = handler.route.exec(fragment).slice(1);
          if (bone.log != null) {
            bone.log("Route: [" + handler.route + ":" + fragment + "]", args);
          }
          if ((_ref1 = (_base = handler.router).middleware) == null) {
            _base.middleware = [];
          }
          bone.async.eachSeries(handler.router.middleware, function(callback, next) {
            return callback.apply(handler.router, [fragment, next]);
          }, function() {
            return handler.callback.apply(handler.router, args);
          });
          return true;
        }
      }
    };

    History.prototype.navigate = function(fragment, options) {
      var url;

      if (!options || options === true) {
        options = {
          trigger: options
        };
      }
      fragment = this.getFragment(fragment || "");
      if (this.fragment === fragment) {
        return;
      }
      this.fragment = fragment;
      url = this.root + fragment;
      if (this._hasPushState) {
        this.history[(options.replace ? "replaceState" : "pushState")]({}, document.title, url);
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
          if (!options.replace) {
            this.iframe.document.open().close();
          }
          this._updateHash(this.iframe.location, fragment, options.replace);
        }
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) {
        return this.loadUrl(fragment);
      }
    };

    History.prototype._updateHash = function(location, fragment, replace) {
      var href;

      if (replace) {
        href = location.href.replace(/(javascript:|#).*$/, "");
        return location.replace(href + "#" + fragment);
      } else {
        return location.hash = "#" + fragment;
      }
    };

    return History;

  })();

}).call(this);
